library(dplyr)
library(readr)


####################  sentinel-2 data ################### 

sentinel_2 <- read_csv("/Net/Groups/BGI/scratch/alucarini/tmp_dataframe_noe.csv")

sentinel_2 %>% View()

sentinel_2 %>% filter(is.na(cir)) %>% print(n=200) #to control NA

sentinel_2$area_radius %>% unique() #to not repeat them 
sentinel_2 <- sentinel_2 %>% drop_na() #to eliminate NA 

#to sort the dataset 
sentinel_2_mod <- sentinel_2 %>% mutate(time_index = as.character(time)) %>% filter(area_radius %in% c(50, 250, 500), stats == "median_vi_area") %>% 
  select(!point_radius) %>% group_by(time_index, area_radius) %>% 
  reframe(time = unique(time), cir = unique(cir), ndvi = unique(ndvi), ndwi = unique(ndwi), nirv = unique(nirv), evi = unique(evi)) %>% ungroup()

sentinel_2_mod %>% View()

tmp_sentinel_2 <- sentinel_2_mod %>% pivot_longer(cols = c(cir, ndvi, ndwi, nirv, evi), names_to = "vis", values_to = "value") %>% 
  unite("new_vi",vis,area_radius) 

tmp_sentinel_2 %>% View()
tmp_sentinel_2 <- tmp_sentinel_2 %>% drop_na()

#df_sentinel_2 <- tmp_sentinel_2 [,c("time", "vis","area_radius","value")] %>%
# select()

sentinel_2_f <- pivot_wider(tmp_sentinel_2, names_from = "new_vi", values_from = "value") %>% select(!time_index)
sentinel_2_f

################### fluxes data ################### 

fluxes <- read_csv("/Net/Groups/BGI/scratch/alucarini/merged_filtered_data.csv")
format <- "%Y%m%d%H%M%S"


fluxes_mod <- fluxes %>% 
  filter(Site_ID == "IT-Noe") %>% 
  mutate(date = ymd_hm(as.character(TIMESTAMP_START))) %>%
  mutate(date_index = date(date))

fluxes_f <- fluxes_mod %>%
  mutate(
    PPFD_IN_df2 = as.numeric(PPFD_IN_df2)
  ) 

fluxes_f_subset <- fluxes_mod %>%
  select(date, PPFD_IN_df2, GPP_DT_VUT_REF)

str(fluxes_f_subset$date)
str(fluxes_f_subset$PPFD_IN_df2)
str((fluxes_f_subset$GPP_DT_VUT_REF))


fluxes_f_subset[fluxes_f_subset == 0.00000] <- NA
fluxes_f_subset <- fluxes_f_subset %>% drop_na() #to eliminate NA 

###################UNIRE DATASET

unified_data <- fluxes_f_subset %>%  #dataset unito e ripetuto
  rowwise() %>%
  mutate(
    closest_value = sentinel_2_f[which.min(abs(as.numeric(difftime(date, sentinel_2_f$time, units = "secs")))),]
  )

#ggplot(unified_data) + geom_point(aes(x = closest_value$ndvi_50 *par, y = GPP_DT_VUT_REF,colour = abs(date - closest_value$time))) + scale_color_continuous(type = "viridis")

# Definire il parametro sigma per la funzione gaussiana
sigma <- 1 * 24 * 60 * 60  # 1 giorno in secondi

unified_data <- sentinel_2_f %>%
  rowwise() %>%
  mutate(
    associated_fluxes = list(
      fluxes_f_subset %>%
        filter(abs(difftime(date, time, units = "days")) <= 3) %>% # Seleziona Â±3 giorni
        mutate(
          time_diff = as.numeric(difftime(date, time, units = "secs")),  # Differenza temporale in secondi
          weight = exp(- (time_diff^2) / (2 * (sigma^2)))  # Funzione di peso gaussiana
        ) %>%
        filter(weight > 0.01)  # Mantieni solo pesi significativi (> 0.01)
    )
  ) %>%
  unnest(cols = associated_fluxes) %>% # Espande la lista in righe
  ungroup()

unified_data <- unified_data %>%
  rename(par = PPFD_IN_df2)

unified_data <- unified_data%>%
  mutate(par = as.numeric(as.character(par)))


##### plot

# Filtra solo le variabili desiderate
variables_cir <- c("cir_50", "cir_250", "cir_500")
variables_ndvi<- c("ndvi_50", "ndvi_250", "ndvi_500")
variables_ndwi<- c("ndwi_50", "ndwi_250", "ndwi_500")
variables_nirv<- c("nirv_50", "nirv_250", "nirv_500")
variables_evi <- c("evi_50", "evi_250", "evi_500")

# Ristruttura il dataframe in formato "long"
unified_data_cir <- unified_data %>%
  pivot_longer(
    cols = all_of(variables_cir),
    names_to = "variable",
    values_to = "value"
  ) %>%
  mutate(variable = factor(variable, levels = c("cir_50", "cir_250", "cir_500")))  # Ordina i livelli

# Ristruttura il dataframe in formato "long"
unified_data_ndvi <- unified_data %>%
  pivot_longer(
    cols = all_of(variables_ndvi),
    names_to = "variable",
    values_to = "value"
  ) %>%
  mutate(variable = factor(variable, levels = c("ndvi_50", "ndvi_250", "ndvi_500")))  # Ordina i livelli

# Ristruttura il dataframe in formato "long"
unified_data_ndwi <- unified_data %>%
  pivot_longer(
    cols = all_of(variables_ndwi),
    names_to = "variable",
    values_to = "value"
  ) %>%
  mutate(variable = factor(variable, levels = c("ndwi_50", "ndwi_250", "ndwi_500")))  # Ordina i livelli

# Ristruttura il dataframe in formato "long"
unified_data_nirv <- unified_data %>%
  pivot_longer(
    cols = all_of(variables_nirv),
    names_to = "variable",
    values_to = "value"
  ) %>%
  mutate(variable = factor(variable, levels = c("nirv_50", "nirv_250", "nirv_500")))  # Ordina i livelli

# Ristruttura il dataframe in formato "long"
unified_data_evi <- unified_data %>%
  pivot_longer(
    cols = all_of(variables_evi),
    names_to = "variable",
    values_to = "value"
  ) %>%
  mutate(variable = factor(variable, levels = c("evi_50", "evi_250", "evi_500")))  # Ordina i livelli
library(dplyr)

# Calcolo dei limiti comuni per x e y
x_limits_cir <- range(unified_data_cir$value * unified_data_cir$par, na.rm = TRUE)
y_limits_cir <- range(unified_data_cir$GPP_DT_VUT_REF, na.rm = TRUE)

x_limits_ndvi <- range(unified_data_ndvi$value * unified_data_ndvi$par, na.rm = TRUE)
y_limits_ndvi <- range(unified_data_ndvi$GPP_DT_VUT_REF, na.rm = TRUE)

x_limits_ndwi <- range(unified_data_ndwi$value * unified_data_ndwi$par, na.rm = TRUE)
y_limits_ndwi <- range(unified_data_ndwi$GPP_DT_VUT_REF, na.rm = TRUE)

x_limits_nirv <- range(unified_data_nirv$value * unified_data_nirv$par, na.rm = TRUE)
y_limits_nirv <- range(unified_data_nirv$GPP_DT_VUT_REF, na.rm = TRUE)

x_limits_evi <- range(unified_data_evi$value * unified_data_evi$par, na.rm = TRUE)
y_limits_evi <- range(unified_data_evi$GPP_DT_VUT_REF, na.rm = TRUE)

##############################

test <- unified_data_ndwi %>% filter(variable == "ndwi_50")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()


test <- unified_data_ndwi %>% filter(variable == "ndwi_250")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()

test <- unified_data_ndwi %>% filter(variable == "ndwi_500")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()
######################################

test <- unified_data_nirv %>% filter(variable == "nirv_50")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()

test <- unified_data_nirv %>% filter(variable == "nirv_250")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()
test <- unified_data_nirv %>% filter(variable == "nirv_500")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()

######################################

test <- unified_data_evi %>% filter(variable == "evi_50")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()


test <- unified_data_evi %>% filter(variable == "evi_250")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()

test <- unified_data_evi %>% filter(variable == "evi_500")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()

######################################
test <- unified_data_cir %>% filter(variable == "cir_50")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()


test <- unified_data_cir %>% filter(variable == "cir_250")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()


test <- unified_data_cir %>% filter(variable == "cir_500")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()

######################################
test <- unified_data_ndvi %>% filter(variable == "ndvi_50")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()

test <- unified_data_ndvi %>% filter(variable == "ndvi_250")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()
test <- unified_data_ndvi %>% filter(variable == "ndvi_500")

test$dummy <- test$value*test$par

summary(lm(formula = GPP_DT_VUT_REF~ value*par, data = test, weights = weight)) %>%
  print()
######################################

unified_data_for_plot <- unified_data %>% pivot_longer(cols = c(cir_50, cir_250, cir_500, nirv_50, nirv_250, nirv_500, ndvi_50, ndvi_250, ndvi_500,
                                                                ndwi_50, ndwi_250, ndwi_500, evi_50, evi_250, evi_500), values_to = "value")
unified_data_for_plot <- unified_data_for_plot %>% separate(name, sep = "_", into = c("VI", "size"))

unified_data_for_plot %>% 
  mutate(dummy_var = value*par) %>% 
  ggplot(aes(x = dummy_var, y = GPP_DT_VUT_REF, colour = weight)) +
  geom_point(alpha = 0.4) +
  scale_color_continuous(type = "viridis") +
  facet_wrap(VI~size, scales = "free",ncol = 3)+
  geom_smooth(method = "lm", formula = y ~ value*par*weight, se = FALSE, colour = "blue") +
  stat_poly_eq(
    aes(
      label = paste(..eq.label.., ..rr.label.., sep = "~~~")
    ),
    formula = y ~ value*par*colour,
    parse = TRUE,
    size = 3,
    colour = "red"
  ) +
  labs(
    colour = "Weight",
    x = "VI * PAR",
    y = "GPP_DT_VUT_REF",
    title = "Scatterplots (VIs)"
  ) +
  theme_minimal() +
  theme(
    strip.text = element_text(size = 14),  # Dimensione del testo dei pannelli
    plot.title = element_text(hjust = 0.5),
    axis.text = element_text(size = 14)   # Valori sugli assi
    # Centrare il titolo
  )
